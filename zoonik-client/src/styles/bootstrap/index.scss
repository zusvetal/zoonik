@import 'bootstrap/scss/functions';

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);
$enable-important-utilities: true;
$prefix: null;

@import '../constants/sizes';
@import '../constants/colors';
@import '../constants/borders';
@import '../constants/typography';

@import 'bootstrap/scss/mixins/utilities';
@import 'bootstrap/scss/mixins/breakpoints';

$utilities: (
  'vertical-align': (
    property: vertical-align,
    class: align,
    values: baseline top middle bottom text-bottom text-top
  ),
  'opacity': (
    property: opacity,
    values: (
      0: 0,
      25: 0.25,
      50: 0.5,
      75: 0.75,
      100: 1
    )
  ),
  'overflow': (
    property: overflow,
    values: auto hidden visible scroll
  ),
  'visibility': (
    property: visibility,
    values: visible hidden
  ),
  'display': (
    property: display,
    class: d,
    values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none
  ),
  'position': (
    property: position,
    values: static relative absolute fixed sticky
  ),
  'width': (
    property: width,
    class: w,
    values: $sizes
  ),
  'max-width': (
    property: max-width,
    class: mw,
    values: $sizes
  ),
  'height': (
    property: height,
    class: h,
    values:
      map-merge(
        $sizes,
        (
          'inherit': inherit
        )
      )
  ),
  'max-height': (
    property: max-height,
    class: mh,
    values: (
      100: 100%
    )
  ),
  'flex': (
    property: flex,
    values: (
      fill: 1 1 auto,
      1: 1
    )
  ),
  'flex-direction': (
    property: flex-direction,
    class: flex,
    values: row column row-reverse column-reverse
  ),
  'flex-grow': (
    property: flex-grow,
    class: flex,
    values: (
      grow-0: 0,
      grow-1: 1
    )
  ),
  'flex-shrink': (
    property: flex-shrink,
    class: flex,
    values: (
      shrink-0: 0,
      shrink-1: 1
    )
  ),
  'flex-wrap': (
    property: flex-wrap,
    class: flex,
    values: wrap nowrap wrap-reverse
  ),
  'justify-content': (
    property: justify-content,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      evenly: space-evenly
    )
  ),
  'align-items': (
    property: align-items,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      baseline: baseline,
      stretch: stretch
    )
  ),
  'margin': (
    property: margin,
    class: m,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'margin-x': (
    property: margin-right margin-left,
    class: mx,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'margin-y': (
    property: margin-top margin-bottom,
    class: my,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'margin-top': (
    property: margin-top,
    class: mt,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'margin-right': (
    property: margin-right,
    class: mr,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'margin-bottom': (
    property: margin-bottom,
    class: mb,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'margin-left': (
    property: margin-left,
    class: ml,
    values:
      map-merge(
        $spacers,
        (
          auto: auto
        )
      )
  ),
  'negative-margin': (
    property: margin,
    class: m,
    values: $negative-spacers
  ),
  'negative-margin-x': (
    property: margin-right margin-left,
    class: mx,
    values: $negative-spacers
  ),
  'negative-margin-y': (
    property: margin-top margin-bottom,
    class: my,
    values: $negative-spacers
  ),
  'negative-margin-top': (
    property: margin-top,
    class: mt,
    values: $negative-spacers
  ),
  'negative-margin-right': (
    property: margin-right,
    class: mr,
    values: $negative-spacers
  ),
  'negative-margin-bottom': (
    property: margin-bottom,
    class: mb,
    values: $negative-spacers
  ),
  'negative-margin-left': (
    property: margin-left,
    class: ml,
    values: $negative-spacers
  ),
  'padding': (
    property: padding,
    class: p,
    values: $spacers
  ),
  'padding-x': (
    property: padding-right padding-left,
    class: px,
    values: $spacers
  ),
  'padding-y': (
    property: padding-top padding-bottom,
    class: py,
    values: $spacers
  ),
  'padding-top': (
    property: padding-top,
    class: pt,
    values: $spacers
  ),
  'padding-right': (
    property: padding-right,
    class: pr,
    values: $spacers
  ),
  'padding-bottom': (
    property: padding-bottom,
    class: pb,
    values: $spacers
  ),
  'padding-left': (
    property: padding-left,
    class: pl,
    values: $spacers
  ),
  'gap': (
    property: gap,
    class: gap,
    values: $spacers
  ),
  'font-weight': (
    property: font-weight,
    class: fw,
    values: (
      light: $font-weight-light,
      lighter: $font-weight-lighter,
      normal: $font-weight-normal,
      bold: $font-weight-bold,
      semibold: $font-weight-semibold,
      bolder: $font-weight-bolder
    )
  ),
  'font-size': (
    property: font-size,
    class: fs,
    values: (
      xxs: $font-size-xxs,
      xs: $font-size-xs,
      sm: $font-size-sm,
      md: $font-size-md,
      lg: $font-size-lg,
      xlg: $font-size-xlg,
      xl: $font-size-xl
    )
  ),
  'line-height': (
    property: line-height,
    class: lh,
    values: (
      sm: $line-height-sm,
      md: $line-height-md,
      lg: $line-height-lg,
      xl: $line-height-xl
    )
  ),
  'text-align': (
    property: text-align,
    class: text,
    values: (
      start: left,
      end: right,
      center: center
    )
  ),
  'text-decoration': (
    property: text-decoration,
    values: none underline line-through
  ),
  'text-transform': (
    property: text-transform,
    class: text,
    values: lowercase uppercase capitalize
  ),
  'white-space': (
    property: white-space,
    class: text,
    values: (
      wrap: normal,
      nowrap: nowrap,
      pre-wrap: pre-wrap
    )
  ),
  'word-wrap': (
    property: word-wrap word-break,
    class: text,
    values: (
      break: break-word
    )
  ),
  'text-color': (
    property: color,
    class: text,
    values: $colors
  ),
  'background-color': (
    property: background-color,
    class: bg,
    values: $colors
  ),
  'border': (
    property: border,
    values: (
      null: 1px solid $border-color,
      0: 0
    )
  ),
  'border-style': (
    property: border-style,
    values: (
      null: solid,
      dashed: dashed
    )
  ),
  'border-top': (
    property: border-top,
    values: (
      null: 1px solid $border-color,
      0: 0
    )
  ),
  'border-right': (
    property: border-right,
    values: (
      null: 1px solid $border-color,
      0: 0
    )
  ),
  'border-bottom': (
    property: border-bottom,
    values: (
      null: 1px solid $border-color,
      0: 0,
      2: 2px solid $border-color
    )
  ),
  'border-bottom-blue': (
    property: border-bottom-color,
    values: (
      blue: $blue
    )
  ),
  'border-left': (
    property: border-left,
    values: (
      null: 1px solid $border-color,
      0: 0
    )
  ),
  'border-width': (
    css-var: true,
    css-variable-name: border-width,
    class: border,
    values: $border-widths
  ),
  'border-radius': (
    property: border-radius,
    class: border-rounded,
    values: (
      null: 2px,
      0: 0,
      1: 4px
    )
  ),
  'border-color': (
    property: border-color,
    class: border-color,
    values: $colors
  ),
  'cursor': (
    property: cursor,
    values: pointer copy auto unset crosshair default not-allowed
  ),
  'top': (
    property: top,
    values: (
      0: 0
    )
  ),
  'list-style': (
    property: list-style,
    class: list-style,
    values: (
      none: none,
      inside: inside
    )
  )
);

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  // Generate media query if needed
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // Loop over each utility property
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Only proceed if responsive media queries are enabled or if it's the base media query
      @if type-of($utility) == 'map' and (map-get($utility, responsive) or $infix == '') {
        @include generate-utility($utility, $infix);
      }
    }
  }
}
